---
layout: post
title: 다소 루즈했던 한 주  
---

이번 주는 회사 일이 바빠서 퇴근하고 나면 에너지가 완전 방전되버렸다.
그래서 에너지가 부족하니 공부에 대한 흥미가 잘 이어지지가 않았고... 페어 프로그래밍도 꼭 하려고 했는데 내가 과제 진도가 너무 느려서인지 잘 구해지지 않았다ㅠㅠ
그래도 공부한 내용을 정리해본다. 거의 클로져, this 개념, 함수의 호출 등등으로 허우적거린 한 주였다.

[선언과 할당]
1. 선언에는 3가지 방법이 있음 

- var : 변수 선언 + 값 초기화
- let : 블록범위 지역변수 선언 + 값 초기화
- const : 블록범위 읽기전용 상수 선언

2. 변수?

- 값의 상징적인 이름. 식별자 (identifier)

3. 변수 할당 

- var, let 문을 사용해서 선언 (지정된 초기값 없을 경우) : 변수의 값은 undefined
- 선언되지 않은 변수에 접근할 경우 ReferenceError 발생

4. 변수 호이스팅 

- 이 현상 때문에, 함수 안에서 변수를 사용한 후에 선언하면 로직상의 오류 발생 가능함
- 동일한 함수 안에 있는 변수는 var 선언 전에 사용해도 이미 선언된 것으로 간주함 ( 즉, console.log(name) 아래에 var name = 'local' 을 작성해도, 이미 console.log에서 name이 지역변수로 선언되었다고 간주하기 때문에 undifined가 출력됨)

5. 코드의 처리 단계 

- 코드는 2단계를 거쳐 처리됨
- 1 : 변수, 함수 선언, 형식 매개변수들이 생성되며 코드를 파싱
- 2 : 런타임 코드 실행 단계로 함수 표현식과 선언되지 않은 변수들이 생성됨

[자바스크립트의 함수란]
1. 익명함수와 선언적 함수
- 익명 함수 : var myFunc = function () { .. } myFunc()
- 선언적 함수 : function myFunc() {...} myFunc()
- 차이는?
        - 선언적 함수는 가장 먼저 읽혀지며, 익명함수는 런타임 실행 때 정의됨
        - 익명함수를 함수 표현식이라고도 말함

2. 매개 변수 * function myFunc(매개변수)
- 지정된 매개변수보다 적게 입력했을 때 : undefined
- 많이 입력했을 때 : 그냥 무시
- 함수에 따라서, 매개 변수의 개수에 맞춰 다른 기능을 하게끔 구현되어 있기도 함 (Array()함수)
- 전달받을 값이 없을 때에는 매개변수가 없다

3. arguments 
- 모든 함수는 변수 arguments라는 인자를 자동으로 가짐
- arguments는 매개 변수의 배열임
        - 인수 : array 중의 특정 항목의 위치(location)을 식별하는 데 필요한 변수나 상수, 혹은 조합
        - 함수를 호출할 때 입력한 인자가 담겨져있음
- 함수 안에서만 사용 가능함
- 즉, arguments[0]은 함수로 전달된 것의 첫 번째 인자를 알아낼 수 있음

            function b (name,x,y,z) {
            console.log(arguments[1]) // x가 찍힘
            }


4. 내부 함수 
- 외부 > 내부함수 호출 불가. 함수 내부에서 내부 함수를 호출할 때에 내부 함수 이름이 함수 외부 이름과 동일하다면 내부 함수가 우선적으로 호출됨
